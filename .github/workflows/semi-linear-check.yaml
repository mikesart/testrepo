#
# Compare HEAD of staging branch with the merge-base of staging
#
name: Semi Linear Check

# ACTIONS_RUNNER_DEBUG
#
# https://docs.github.com/en/actions/monitoring-and-troubleshooting-workflows/troubleshooting-workflows/enabling-debug-logging
# To set ACTIONS_STEP_DEBUG to true in GitHub, follow these steps:
#  * Go to your GitHub repository.
#  * Click on "Settings" at the top of the repository page.
#  * In the left sidebar, click on "Secrets and variables", then select "Actions".
#  * Click on the "New repository secret" button.
#  * In the "Name" field, enter "ACTIONS_STEP_DEBUG" (all uppercase).
#  * In the "Value" field, enter "true" (lowercase).
#  * Click "Add secret" to save.
# 
# Once you've added this secret, GitHub Actions will automatically enable
# step debug logging for all future workflow runs in this repository. This
# will provide more detailed logs for each step in your workflows, which
# can be very helpful for debugging.

on:
  pull_request:

jobs:
  check:
    name: semi linear check
    runs-on: ubuntu-latest

    steps:
      # Check-out repo under $GITHUB_WORKSPACE
      - uses: actions/checkout@v4

      - name: Dump GitHub context (for debugging)
        if: ${{ env.DEBUG == 'true' }}
        # if: ${{ runner.debug == '1' }}
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
          VARS: ${{ toJSON(vars) }}
          RUNNER: ${{ toJSON(runner) }}
        run: |
          echo "GITHUB_CONTEXT: $GITHUB_CONTEXT"
          echo ""
          echo "VARS: $VARS"
          echo ""
          echo "RUNNER: $RUNNER"

      - name: Pull Request Commits
        if: github.event_name == 'pull_request'
        env:
          PULL_COMMITS: ${{ github.event.pull_request.commits }}
        shell: bash
        run: |
          echo "::debug::This is a debug line set with ACTIONS_STEP_DEBUG"
          echo pull_request event
          echo "PULL_COMMITS: $PULL_COMMITS"

      - name: Extract branch name and commit hash
        env:
          BRANCH_NAME: ${{ github.head_ref }}
        shell: bash
        run: |
          git fetch --prune --no-tags --no-recurse-submodules origin staging
          git fetch --prune --no-tags --no-recurse-submodules origin ${BRANCH_NAME}
          git branch -v

          echo "Job triggered by ${{ github.event_name }} event."
          echo "Name of branch: ${{ github.ref }}"
          echo "Repository: ${{ github.repository }}"
          echo "github.ref_name: ${{ github.ref_name }}"
          echo "github.head_ref: ${{ github.head_ref }}"

          echo "common_commit=$(git merge-base origin/staging origin/${BRANCH_NAME})" >> "$GITHUB_OUTPUT"
          echo "staging_head=$(git rev-parse origin/staging)" >> "$GITHUB_OUTPUT"
        id: vars

      - name: Fail if current branch requires a rebase
        shell: bash
        run: |
          echo "Comparing common_commit ${{ steps.vars.outputs.common_commit }} to staging_head ${{ steps.vars.outputs.staging_head }}"
          if [ "${{ steps.vars.outputs.common_commit }}" != "${{ steps.vars.outputs.staging_head }}" ]; then
            echo "Error: Your branch is not up-to-date with the staging branch."
            echo "The common ancestor (${{ steps.vars.outputs.common_commit }}) does not match the HEAD of staging (${{ steps.vars.outputs.staging_head }})."
            echo "Please rebase your branch on the latest staging before merging."
            exit 1
          else
            echo "Branch is up-to-date with staging. Good to go!"
          fi

