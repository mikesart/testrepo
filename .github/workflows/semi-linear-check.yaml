#
# Compare HEAD of target branch with the merge-base of target
#
name: Semi Linear Check

# Note:
#   To enable debugging, set "Enable debug logging" after clicking "Re-run all jobs" button
#   Or set "ACTIONS_STEP_DEBUG" to true in "Secrets and variables" / "Actions"

on:
  pull_request:

jobs:
  check:
    name: semi linear check
    runs-on: ubuntu-latest

    steps:
      # Check-out repo under $GITHUB_WORKSPACE
      - uses: actions/checkout@v4

      - name: Dump GitHub context (Debug)
        if: ${{ env.DEBUG == 'true' }}
        env:
          GITHUB_CONTEXT: ${{ toJSON(github) }}
        run: |
          echo "GITHUB_CONTEXT: $GITHUB_CONTEXT"

      - name: Dump Vars context (Debug)
        if: ${{ env.DEBUG == 'true' }}
        env:
          VARS: ${{ toJSON(vars) }}
        run: |
          echo "VARS: $VARS"

      - name: Dump Runner context (Debug)
        if: ${{ env.DEBUG == 'true' }}
        env:
          RUNNER: ${{ toJSON(runner) }}
        run: |
          echo "RUNNER: $RUNNER"

      - name: Pull Request Commits
        if: github.event_name == 'pull_request'
        env:
          PULL_COMMITS: ${{ github.event.pull_request.commits }}
        shell: bash
        run: |
          echo pull_request event
          echo "PULL_COMMITS: $PULL_COMMITS"

      - name: Extract branch name and commit hash
        env:
          BRANCH_NAME: ${{ github.head_ref }}
          BRANCH_TARGET: ${{ github.base_ref }}
        shell: bash
        run: |
          git fetch --prune --no-tags --no-recurse-submodules origin ${BRANCH_TARGET}
          git fetch --prune --no-tags --no-recurse-submodules origin ${BRANCH_NAME}
          git branch -v

          echo "Job triggered by ${{ github.event_name }} event."
          echo "Name of branch: ${{ github.ref }}"
          echo "Repository: ${{ github.repository }}"
          echo "github.ref_name: ${{ github.ref_name }}"
          echo "github.head_ref: ${{ github.head_ref }}"

          echo "common_commit=$(git merge-base origin/${BRANCH_TARGET} origin/${BRANCH_NAME})" >> "$GITHUB_OUTPUT"
          echo "target_head=$(git rev-parse origin/${BRANCH_TARGET})" >> "$GITHUB_OUTPUT"
        id: vars

      - name: Fail if current branch requires a rebase
        env:
          BRANCH_TARGET: ${{ github.base_ref }}
          TARGET_HEAD: ${{ steps.vars.outputs.target_head }}
          COMMON_COMMIT: ${{ steps.vars.outputs.common_commit }}
        shell: bash
        run: |
          echo "Comparing common_commit $COMMON_COMMIT to target_head $TARGET_HEAD"
          if [ "$COMMON_COMMIT" != "$TARGET_HEAD" ]; then
            echo "Error: Your branch is not up-to-date with the $BRANCH_TARGET branch."
            echo "The common ancestor ($COMMON_COMMIT) does not match the HEAD of $BRANCH_TARGET ($TARGET_HEAD)."
            echo "Please rebase your branch on the latest $BRANCH_TARGET before merging."
            exit 1
          else
            echo "Branch is up-to-date with $BRANCH_TARGET. Good to go!"
          fi

